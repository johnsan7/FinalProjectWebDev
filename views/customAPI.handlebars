
<head>
<link rel="stylesheet" type="text/css" href="style.css">
<title>API Explanation, Have I been Pwned API</title>

<div class="header"
<h3>API Guide Assignment, Web Development</h3>
<br>
Andrew Johnson
</div>


<body>

<div class=toptitle>
Custom API Implementation
</div>


<p class=textPar> I set out originally to create an interface that would leverage the Ashley Madison hack data. 
Ashley Madison was supposedly a website where people involved in relationships would register presumably to facilitate cheating on their spouse. 
There was an enormous leak of account information on Ashley Madison and it is on HIBP. 
The intent of this custom interface was to allow a person to send a POST request containing a list of email addresses. 
The page would then do get requests using version 1 of the API to see if the email was leaked as part of the Ashley Madison hack. 
Unfortunately, (or really probably fortunately, this is sort of sensitive information) the creator of HIBP has anticipated uses such as this, and does not release the Ashley Madison data through the API, or to users except it will reveal if an email was in that leak only if the user first confirms that they have access to the email address. 
Of course that renders the planned example impossible. </p>

<p class=textPar>	I have built something similar, but not quite as useful. 
With this page, it accepts a POST request in application/x-www-form-urlencoded format. 
You would want to use the format: </p>

<div class=code>
Email1=andrewjohnsonlaw@gmail.com&email2=jeff@jeff.com
</div>

<p class=textPar> For example. It will take each of those email addresses, and it will print to console the different hacks that those email addresses were a part of. 
Some problems exist with this implementation. </p>

<p class=textPar>	First, I read in all of the email addresses with the for(var email in req.body) line, and then send each in a get request using version 1 of the API. 
Since those are asynchronous calls, they do not show up right away. 
The result is returned therefore before the list can be sent back. 
I tried very hard to find a different way to do that, but I could not figure out a great way to hold up the returning until all of the requests were done. 
</p>
	
<p class=textPar> Second, I was not able to pair the email address with each leak information. 
I tried many different ways, assuming I needed to create a closure, but it did not work.  
Consequently. This implementation will log to console all of the different leaks every email address appeared in. The most important code is below, the code in its entirety is at the end of this page. 
</p>	
	
<div class=code>
	
<pre>

app.get('/', function(req,res)
{
	console.log("Please send requests as POSTS");	

});
//This should take the post request, then send a get request to HaveIBeenPwned, if the email was not in the Ashley Madison hack, it should add the email with a false as key, if it was, it should add the email with a true key
app.post('/', function(req,res)
{
	
	var outObj = {};
	var hackedList = [];
	//The below is the url to add the email addresses to
	var baseUrl = 'https://haveibeenpwned.com/api/breachedaccount/'
		

		//For each email address fed
		for(var email in req.body)
		{
			var specificUser = req.body[email];
			console.log("Specific user is: ", specificUser);
			//The below sends the request to HIBP in a get using v1 of the API
				request(baseUrl + specificUser, function(err,response,body)
				{
					var borkedEmail = specificUser;
					console.log("making request to HIBP");
					if(!err && (response.statusCode > 199 && response.statusCode < 400))
					{
						hackedList.push(body);
						console.log(hackedList);

					}
					else if(response.statusCode == 403)
					{

					}
			
				});
			

		}

		
	res.render('returned');
});



app.listen(app.get('port'), function(){
	console.log('Started on port 1776');
	
});

</pre>
	
</div>	

<p class=textPar>
This code could definitely be improved, but it is an example of how to implement a server sided call to the HIBP API. 
The advantage of using a POST through this method is the greater length allowed and the security of not having the addresses in the URL. That service is active at: http://ec2-52-26-46-121.us-west-2.compute.amazonaws.com:1776 
It takes POST requests and prints out to the console the hacked sites associated with each email address. 
This implementation did not use a hard coded url, but adds the email addresses as it goes. 
Finally the Else if statement that is looking for error 403, in the first version of the API, 403 is returned if there are no records. This merely ignores that possibility and logs nothing when that happens. 
</p>

<a href="http://ec2-52-26-46-121.us-west-2.compute.amazonaws.com:1925/2ndImplementaton">Previous Page</a> <a href="http://ec2-52-26-46-121.us-west-2.compute.amazonaws.com:1925">Home</a> 

<p>Here is the code in its entirety</p>

<div class=code>
<pre>
//This code, var express through app.set('port',1776) is code from Professor Justin Wolford the OSU Web Development professor. The implementation that I have is the exact same as the lectures


var express = require('express');

var app = express();

var handlebars = require('express-handlebars').create({defaultLayout:'main'});
var bodyParser = require('body-parser');


var request = require('request');




app.use(bodyParser.urlencoded({ extended: false}));
app.use(bodyParser.json());




app.engine('handlebars', handlebars.engine);
app.set('view engine', 'handlebars');
app.set('port', 1776);



	
app.get('/', function(req,res)
{
	console.log("Please send requests as POSTS");	

});
//This should take the post request, then send a get request to HaveIBeenPwned, if the email was not in the Ashley Madison hack, it should add the email with a false as key, if it was, it should add the email with a true key
app.post('/', function(req,res)
{
	
	var outObj = {};
	var hackedList = [];
	//The below is the url to add the email addresses to
	var baseUrl = 'https://haveibeenpwned.com/api/breachedaccount/'
		

		//For each email address fed
		for(var email in req.body)
		{
			var specificUser = req.body[email];
			console.log("Specific user is: ", specificUser);
			//The below sends the request to HIBP in a get using v1 of the API
				request(baseUrl + specificUser, function(err,response,body)
				{
					var borkedEmail = specificUser;
					console.log("making request to HIBP");
					if(!err && (response.statusCode > 199 && response.statusCode < 400))
					{
						hackedList.push(body);
						console.log(hackedList);

					}
					else if(response.statusCode == 403)
					{

					}
			
				});
			

		}

		
	res.render('returned');
});


//These next two functions were written by Justin Wolford, USO CS Professor
app.use(function(req,res)
{
	res.status(404);
	res.render('404');
	
});

app.use(function(err,req,res,next){
	res.type('plain/text');
	res.status(500);
	res.render('500');	
});


app.listen(app.get('port'), function(){
	console.log('Started on port 1776');
	
});

</pre>
</div>

<a href="http://ec2-52-26-46-121.us-west-2.compute.amazonaws.com:1925/2ndImplementaton">Previous Page</a> <a href="http://ec2-52-26-46-121.us-west-2.compute.amazonaws.com:1925">Home</a> 

</body>
