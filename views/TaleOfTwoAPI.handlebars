
<head>
<link rel="stylesheet" type="text/css" href="style.css">
<title>API Explanation, Have I been Pwned API</title>

<div class="header"
<h3>API Guide Assignment, Web Development</h3>
<br>
Andrew Johnson
</div>


</head>
<body>

<div class=toptitle>
A Tale of Two APIs
</div>

<p class=textPar> The older version of the API (version 1) was extraordinarily simple. 
The user merely had to send a get request to https://haveibeenpwned.com/api/breachedaccount/{account} substituting the account information of course. 
No key or request headers necessary. 
JavaScript code that accomplishes that trivial task is below. I have hard coded an email adress, but you could just substitute any that you like.</p>

<div class=code> 
<pre>
	console.log("Getting to request");
		var req = new XMLHttpRequest();
				
		var sendAddress = 'https://haveibeenpwned.com/api/breachedaccount/alanmandrag@hotmail.com';
				
		//This sets up an asynchronous get request 
		req.open('GET', sendAddress, true);
		
		req.addEventListener('load',function()
		{
			if(req.status >= 200 && req.status < 400)
			{
				console.log("Request received back!");
				console.log("Response Reads ", req.responseText);

			}
			//If email address is not found in a leak, 404 is returned. 
			else if(req.status == 404) 
			{
				console.log("Email address was not found, no leak");
			}
			else
			{
				console.log("Error in request");
			}
					
			});
			
		req.send(null);
</pre>
</div>

<p class=textPar>	The second version of the API is still pretty simple, but actually has three methods that a person can use to access it. 
On top of the 3 methods, there are now more possible things to request from the API. V1 did just a JSON list of accounts that have been hacked for a particular email address. 
In V2 you can use the API to get breaches for an account, but also for all breached sites that they have record of, or all records for a single breached site, or for others.  </p> 

<p class=textPar>The three methods to access the V2 API are interestingly discussed in <a href="http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html">Your API versioning is wrong, which is why I decided to do it 3 different wrong ways.</a> 
In that article the owner of haveIbeenpwned.com discussed the general philosophy with his dilemma in designing the second iteration of the API for this website.  </p>

<p class=textPar>The problem comes with how to designate it is the 2nd version of the API. 
You are permitted to merely put v2 in the url, however that method is not preferred because the url should not be changing.  
The other two methods use the constant url, and either specify a custom request header called api-version, or use the same url and use content negotiation. 
With all methods you must specify the user id. 
I am going to use the static url and content negotiation method in the implementation on the next page. 
You can feel free to use any of the others should you so desire.  </P>

<a href="http://ec2-52-26-46-121.us-west-2.compute.amazonaws.com:1925/laxAPI">Previous Page</a> <a href="http://ec2-52-26-46-121.us-west-2.compute.amazonaws.com:1925/2ndImplementaton">Next Page</a> 

</body>
